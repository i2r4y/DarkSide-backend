// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hierarquia {
  id                   String                 @id @default(uuid())
  nome                 String                 @unique
  CadastroFuncionarios CadastroFuncionarios[]

  @@map("hierarquia")
}

model CadastroFuncionarios {
  id              String     @id @default(uuid())
  nomeFuncionario String     @map("nome_funcionario")
  telefone        String
  cpf             String     @unique
  email           String     @unique
  senha           String
  cep             String
  rua             String
  numero          String
  bairro          String
  cidade          String
  estado          String
  hierarquia      Hierarquia @relation(fields: [hierarquiaId], references: [id])
  hierarquiaId    String
  Vendas          Vendas[]

  @@map("cadastro_funcionarios")
}

model Vendas {
  id             String               @id @default(uuid())
  valorTotal     String               @map("valor_total")
  DataVenda      String               @map("data_venda")
  funcionarios   CadastroFuncionarios @relation(fields: [funcionariosId], references: [id])
  funcionariosId String
  // Carrinho       Carrinho[]

  @@map("vendas")
}

model CadastroUsuario {
  id        String     @id @default(uuid())
  nome      String
  email     String     @unique
  senha     String
  create_at DateTime?  @default(now())
  update_at DateTime?  @default(now())
  // Carrinho  Carrinho[]

  @@map("cadastro_usuarios")
}

// model Carrinho {
//   id            String          @id @default(uuid())
//   quantidade    String
//   precoUnitario String          @map("preco_unitario")
//   produtos      Produtos        @relation(fields: [produtosId], references: [id])
//   produtosId    String
//   vendas        Vendas          @relation(fields: [vendasId], references: [id])
//   vendasId      String
//   cliente       CadastroUsuario @relation(fields: [clientesId], references: [id])
//   clientesId    String

//   @@map("carrinho")
// }

model CadastroFornecedores {
  id             String     @id @default(uuid())
  nomeFornecedor String     @map("nome_fornecedor")
  cnpj           String     @unique
  telefone       String
  email          String     @unique
  senha          String
  cep            String
  rua            String
  numero         String
  bairro         String
  cidade         String
  estado         String
  Produtos       Produtos[]

  @@map("cadastro_fornecedores")
}

model Produtos {
  id             String               @id @default(uuid())
  nome           String
  descricao      String
  preco          String
  dataAdicao     String               @map("data_adicao")
  categorias     Categorias           @relation(fields: [categoriasId], references: [id])
  categoriasId   String
  estoque        Estoque              @relation(fields: [estoqueId], references: [id])
  estoqueId      String
  fornecedores   CadastroFornecedores @relation(fields: [fornecedoresId], references: [id])
  fornecedoresId String
  // Carrinho       Carrinho[]

  @@map("produtos")
}

model Categorias {
  id            String     @id @default(uuid())
  nomeCategoria String     @map("nome_categoria")
  Produtos      Produtos[]

  @@map("categorias")
}

model Estoque {
  id         String     @id @default(uuid())
  quantidade String
  Produtos   Produtos[]

  @@map("estoque")
}
